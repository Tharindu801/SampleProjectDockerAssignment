name: Build and Push Docker Image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # This uses an official GitHub Action to clone repo into the VM so the workflow has access 
    #to project files.
    - name: Checkout code
      uses: actions/checkout@v4

    #This installs the .NET 8 SDK on the VM so build and run .NET projects.
    - name: Set up .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    #Download all NuGet dependencies needed for the build.
    - name: Restore dependencies
      run: dotnet restore SampleProjectDockerAssignment/SampleProjectDockerAssignment.csproj

    #Compiles project in the Release configuration, producing optimized binaries.
    - name: Build project
      run: dotnet build SampleProjectDockerAssignment/SampleProjectDockerAssignment.csproj --configuration Release

    - name: Run tests (if applicable)
      run: dotnet test --no-build --verbosity normal
      continue-on-error: true

    #Credentials are stored securely in GitHub Secrets (DOCKER_USERNAME and DOCKER_PASSWORD).
    # - name: Log in to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}

    #Builds a Docker image from the Dockerfile inside ./SampleProjectDockerAssignment directory.
    #Tags the image as <docker-username>/sampleproject:latest.
    # - name: Build Docker image
    #   run: |
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/sampleproject:latest ./SampleProjectDockerAssignment

    #Pushes the tagged image to Docker Hub so it can be pulled from anywhere.
    # - name: Push Docker image
    #   run: |
    #     docker push ${{ secrets.DOCKER_USERNAME }}/sampleproject:latest

# deploy:
#     name: Deploy to Server
      #This tells GitHub "wait for the build job to finish successfully before running this."
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#     - name: SSH into Server and Pull + Restart Container
#       uses: appleboy/ssh-action@v1.0.3
#       with:
#         host: ${{ secrets.SERVER_HOST }}
#         username: ${{ secrets.SERVER_USER }}
#         password: ${{ secrets.SERVER_PASSWORD }}
#         script: |
            #Pulls the latest Docker image just pushed to Docker Hub.

#           docker pull ${{ secrets.DOCKER_USERNAME }}/sampleproject:latest

            #Tries to stop the running container named samplecontainer.
#           docker stop samplecontainer || true

            #Removes the stopped container (if it existed).
#           docker rm samplecontainer || true
#           docker run -d -p 80:8080 --name samplecontainer ${{ secrets.DOCKER_USERNAME }}/sampleproject:latest